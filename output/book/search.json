[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Anwendungsbaustein - Auswertung von fds-Daten",
    "section": "",
    "text": "Preamble",
    "crumbs": [
      "Preamble"
    ]
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Anwendungsbaustein - Auswertung von fds-Daten",
    "section": "Requirements",
    "text": "Requirements\n\nBasic knowledge of python\nImporting packages\nNumPy basics\nPandas basics\nPlotting with matplotlib\nBasic knowledge in simulating fires",
    "crumbs": [
      "Preamble"
    ]
  },
  {
    "objectID": "index.html#used-packages-and-data-sets",
    "href": "index.html#used-packages-and-data-sets",
    "title": "Anwendungsbaustein - Auswertung von fds-Daten",
    "section": "Used packages and data sets",
    "text": "Used packages and data sets\n\nNumPy\npandas\nmatplotlib\nfdsreader",
    "crumbs": [
      "Preamble"
    ]
  },
  {
    "objectID": "index.html#time-required",
    "href": "index.html#time-required",
    "title": "Anwendungsbaustein - Auswertung von fds-Daten",
    "section": "Time required",
    "text": "Time required\nGeschätzte Bearbeitungszeit: 4h",
    "crumbs": [
      "Preamble"
    ]
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "Anwendungsbaustein - Auswertung von fds-Daten",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nReading in data using the fdsreader\nAnalyzing the data to perform an ASET analysis",
    "crumbs": [
      "Preamble"
    ]
  },
  {
    "objectID": "skript/introduction.html",
    "href": "skript/introduction.html",
    "title": "1  Introduction ASET",
    "section": "",
    "text": "1.1 Data acquisation\nThe data we will look at were generated using the Fire Dynamics Simulator (FDS). FDS (Fire Dynamics Simulator) is a computational fluid dynamics model used to simulate fire-driven fluid flow, allowing for the analysis and prediction of fire behavior and its impact on buildings and environments.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction ASET</span>"
    ]
  },
  {
    "objectID": "skript/introduction.html#data-acquisation",
    "href": "skript/introduction.html#data-acquisation",
    "title": "1  Introduction ASET",
    "section": "",
    "text": "Warning\n\n\n\nThis building block wont go any further into simulations and fds. The resulting simulation data used in this block will be provided as a download.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction ASET</span>"
    ]
  },
  {
    "objectID": "skript/fdsreader.html",
    "href": "skript/fdsreader.html",
    "title": "2  Fdsreader",
    "section": "",
    "text": "2.1 Installing and importing the package\nThe fdsreader module can be installed via pip (see also the GitHub repository):\nTo learn the basic usage of the fdsreader module we will look at a simple FDS scenario. Lets first import the module:\nimport fdsreader\nSince we will also plot the data we will import matplotlibtoo.\nimport matplotlib.pyplot as plt",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fdsreader</span>"
    ]
  },
  {
    "objectID": "skript/fdsreader.html#installing-and-importing-the-package",
    "href": "skript/fdsreader.html#installing-and-importing-the-package",
    "title": "2  Fdsreader",
    "section": "",
    "text": "pip install fdsreader",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fdsreader</span>"
    ]
  },
  {
    "objectID": "skript/fdsreader.html#choosing-the-correct-folder",
    "href": "skript/fdsreader.html#choosing-the-correct-folder",
    "title": "2  Fdsreader",
    "section": "2.2 Choosing the correct folder",
    "text": "2.2 Choosing the correct folder\nNext, the reader needs to be pointed to the directory, which contains the simulation data, especailly the smokeview file.\n\n# define the path to the data\npath_to_data = '../skript/01-data/first_example'\n\nsim = fdsreader.Simulation(path_to_data)\n\nThe Simulation object sim contains now all the information and data about the simulaiton output:\n\nsim\n\nSimulation(chid=StecklerExample,\n           meshes=1,\n           obstructions=7,\n           slices=5,\n           data_3d=5,\n           smoke_3d=3,\n           devices=4)\n\n\nThe variable sim contains information about the mesh (MESH), four slices (SLCF) and four point measurements (DEVC). The additional device – there were just three defined in the FDS input file – is the time column.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fdsreader</span>"
    ]
  },
  {
    "objectID": "skript/fdsreader.html#device-data",
    "href": "skript/fdsreader.html#device-data",
    "title": "2  Fdsreader",
    "section": "2.3 Device Data",
    "text": "2.3 Device Data\n\n\n\n\n\n\nDevices in FDS\n\n\n\nDevices act like virtual sensors, allowing one to record data such as temperature, heat flux, gas concentration, velocity, and more, at specific locations within the simulation domain. This data can be crucial for understanding the behavior of fire and smoke under different conditions.\nA device can get a label (ID), which makes it much easier to identify in the comma separated value (CSV) file created during the simulation. It needs a location and a quantity.\nLocations can be provided in different ways, we focus her on a single point using XYZ. However, lines, planes and volumes are possible as well.\nThe QUANTITY parameter expects a string to define what values are to be recorded. As an example, let’s take the gas temperature, using TEMPERATURE.\n\n\nThe simplest data set is the output of the DEVC directives. The available data and meta information can be directly printed:\n\n# short reference for convinience, i.e. `devc` contains all devices\ndevc = sim.devices\nprint(devc)\n\n[Device(id='Time', xyz=(0.0, 0.0, 0.0), quantity=Quantity('TIME')),\nDevice(id='Temp_Door_Low', xyz=(1.45, 0.05, 0.1), quantity=Quantity('TEMPERATURE')),\nDevice(id='Temp_Door_Mid', xyz=(1.45, 0.05, 1.0), quantity=Quantity('TEMPERATURE')),\nDevice(id='Temp_Door_High', xyz=(1.45, 0.05, 1.65), quantity=Quantity('TEMPERATURE'))]\n\n\nThe Device class contains all relevant information, see device documentation.\n\nfor i in devc:\n    print(f\"ID: {i.id},\\t quantity: {i.quantity_name}, \\t position: {i.position}\")\n\nID: Time,    quantity: TIME,     position: (0.0, 0.0, 0.0)\nID: Temp_Door_Low,   quantity: TEMPERATURE,      position: (1.45, 0.05, 0.1)\nID: Temp_Door_Mid,   quantity: TEMPERATURE,      position: (1.45, 0.05, 1.0)\nID: Temp_Door_High,  quantity: TEMPERATURE,      position: (1.45, 0.05, 1.65)\n\n\nIndividual devices, including the time column, are accessable as dictironary entries using their ID as key. The data of each individual device (Device.data) is stored as a numpy array:\n\ntype(devc['Temp_Door_Mid'].data)\n\nnumpy.ndarray\n\n\nThe length matches the expected value, i.e. 1801, as the simulation time was and the divices were writen out every second, including the initial time step, here at t = 0s.\n\nlen(devc['Time'].data)\n\n1801\n\n\nA raw look at the data (Device.data):\n\ndevc['Temp_Door_Mid'].data\n\narray([ 20.      ,  20.002083,  20.034418, ..., 105.32822 , 114.82179 ,\n       115.01705 ], dtype=float32)\n\n\nThe device data can be also visualised with matplotlib:\n\n# create the plot\nplt.plot(devc['Time'].data, devc['Temp_Door_High'].data)\n\n# label the axes\nplt.xlabel(\"time / s\")\ndevc_id = devc['Temp_Door_High'].id\ndevc_q = devc['Temp_Door_High'].quantity_name\ndevc_u = devc['Temp_Door_High'].unit\nplt.ylabel(f\"{devc_q} ({devc_id}) / {devc_u}\")\n\n# add a grid\nplt.grid()\n\n\n\n\n\n\n\n\nIn the same manner a set of devices can be plotted at once. Like all devices with names starting with Temp_:\n\n# loop over all devices\nfor i in devc:\n    \n    # consider only devices with an ID that starts with 'Temp_'\n    if not i.id.startswith('Temp_'): \n        continue\n    \n    plt.plot(devc[\"Time\"].data, i.data, label=i.id)\n    \nplt.legend()\nplt.xlabel(\"time / s\")\nplt.ylabel('temperature / $^\\circ$C')\nplt.grid()\n\n&lt;&gt;:12: SyntaxWarning: invalid escape sequence '\\c'\n&lt;&gt;:12: SyntaxWarning: invalid escape sequence '\\c'\n/var/folders/p_/ks3trxjx0jd839_g4g0vm4nc0000gn/T/ipykernel_85218/1295739546.py:12: SyntaxWarning: invalid escape sequence '\\c'\n  plt.ylabel('temperature / $^\\circ$C')",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fdsreader</span>"
    ]
  },
  {
    "objectID": "skript/fdsreader.html#hrr-data",
    "href": "skript/fdsreader.html#hrr-data",
    "title": "2  Fdsreader",
    "section": "2.4 HRR Data",
    "text": "2.4 HRR Data\n\n\n\n\n\n\nHeat Release Rate (HRR)\n\n\n\nThe crucial parameter in fire modeling, representing the rate at which energy is released by a fire, typically measured in kilowatts (kW) or megawatts (MW).\n\n\nIn the same fashion as the DEVC data, the data written to the HRR file can be directly accessed. It is not stored in the devices but in the hrr element of the Simulation object.\n\nplt.plot(sim.hrr['Time'], sim.hrr['HRR'], label='heat release from fire')\n\nplt.plot(sim.hrr['Time'], sim.hrr['Q_RADI'], label='radiative')\nplt.plot(sim.hrr['Time'], sim.hrr['Q_COND'], label='conductive')\nplt.plot(sim.hrr['Time'], sim.hrr['Q_CONV'], label='convective')\n\nplt.plot(sim.hrr['Time'], \n         sim.hrr['HRR'] + sim.hrr['Q_RADI'] + sim.hrr['Q_COND'] + sim.hrr['Q_CONV'], \n         color='grey', label='sum', zorder=0)\n\nplt.xlabel('time / s')\nplt.ylabel('heat flow rate / kW')\nplt.legend()\nplt.grid()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fdsreader</span>"
    ]
  },
  {
    "objectID": "skript/fdsreader.html#slice-data",
    "href": "skript/fdsreader.html#slice-data",
    "title": "2  Fdsreader",
    "section": "2.5 Slice Data",
    "text": "2.5 Slice Data\n\n\n\n\n\n\nSlice data\n\n\n\nSclices are a type of output that allows you to visualize the distribution of specific quantities (e.g., temperature, velocity, smoke concentration) within a plane of the simulation domain. These slices are essentially cross-sectional views of the data, providing insight into how these quantities vary within a specific area of the simulated environment.\n\n\nData generated by SLCF directives span over two or three spatial dimensions plus the time dimension. Besides that, they can be distributed across multiple meshes.\nThe data of a slice is stored for each mesh individually. In this simple example, there is only a single mesh, yet for formal consistency it still needs to be referred.\nThe data structure is as follows:\n\nsim.slices[sliceid][meshid].data[timestep, direction1, direction2]\n\nwhere sliceid is just the index of the slice, meshid is the index of the mesh, here in this example 0, and the reference to the data is given by the time step id and then the two spatial indices (for two dimensional slices).\nIn general there are multiple slice objects available:\n\n# print available slice data\nfor slice in sim.slices:\n    print(f\"Slice Type [2D/3D]: {slice.type}\\n  Quantity: {slice.quantity.name}\\n\", \n          f\" Physical Extent: {slice.extent}\\n  Orientation [1/2/3]: {slice.orientation}\\n\")\n\nSlice Type [2D/3D]: 2D\n  Quantity: TEMPERATURE\n  Physical Extent: Extent([0.00, 0.00] x [-1.40, 1.40] x [0.00, 2.20])\n  Orientation [1/2/3]: 1\n\nSlice Type [2D/3D]: 2D\n  Quantity: TEMPERATURE\n  Physical Extent: Extent([-1.40, 2.60] x [0.00, 0.00] x [0.00, 2.20])\n  Orientation [1/2/3]: 2\n\nSlice Type [2D/3D]: 2D\n  Quantity: W-VELOCITY\n  Physical Extent: Extent([0.00, 0.00] x [-1.40, 1.40] x [0.00, 2.20])\n  Orientation [1/2/3]: 1\n\nSlice Type [2D/3D]: 2D\n  Quantity: U-VELOCITY\n  Physical Extent: Extent([-1.40, 2.60] x [0.00, 0.00] x [0.00, 2.20])\n  Orientation [1/2/3]: 2\n\nSlice Type [2D/3D]: 2D\n  Quantity: W-VELOCITY\n  Physical Extent: Extent([-1.40, 2.60] x [-1.40, 1.40] x [1.80, 1.80])\n  Orientation [1/2/3]: 3\n\n\n\nThere are multiple ways to find the right slice in the set of all slices. One way is to filter for a quantity using the filter_by_quantity function or choose a slice by its ID.\n\n# get the W-VELOCITY slice(s)\nw_slice = sim.slices.filter_by_quantity(\"W-VELOCITY\")\nprint(w_slice)\n\nSliceCollection([Slice([2D] quantity=Quantity('W-VELOCITY'), cell_centered=False, extent=Extent([0.00, 0.00] x [-1.40, 1.40] x [0.00, 2.20]), extent_dirs=('y', 'z'), orientation=1),\nSlice([2D] quantity=Quantity('W-VELOCITY'), cell_centered=False, extent=Extent([-1.40, 2.60] x [-1.40, 1.40] x [1.80, 1.80]), extent_dirs=('x', 'y'), orientation=3)])\n\n\nAnother way is to select a slice based on its distance to a given point.\n\n# select slice, by its distance to a given point\nslc = w_slice.get_nearest(x=1, z=2)\nprint(slc)\n\nSlice([2D] quantity=Quantity('W-VELOCITY'), cell_centered=False, extent=Extent([-1.40, 2.60] x [-1.40, 1.40] x [1.80, 1.80]), extent_dirs=('x', 'y'), orientation=3)\n\n\nTo access the actual slice data, the actual mesh and a point in time needs to be specified. In this example, there is only one mesh, thus the index is 0. The function get_nearest_timestemp helps to find the right time index.\n\n# choose and output the time step, next to t=75 s\nit = slc.get_nearest_timestep(25)\nprint(f\"Time step: {it}\")\nprint(f\"Simulation time: {slc.times[it]}\")\n\nTime step: 25\nSimulation time: 25.02111\n\n\nThe following example illustrates the visualisation of the data and steps needed to adjust the representation. The needed adjustments are due to the data orientation expected by the imshow function.\n\n# choose the temperature slice in y-direction\nslc = sim.slices.filter_by_quantity('TEMPERATURE').get_nearest(x=3, y=0)\nprint(slc)\n# only one mesh\nslc_data = slc[0].data\nprint(slc_data)\n\nSlice([2D] quantity=Quantity('TEMPERATURE'), cell_centered=False, extent=Extent([-1.40, 2.60] x [0.00, 0.00] x [0.00, 2.20]), extent_dirs=('x', 'z'), orientation=2)\n[[[ 20.        20.        20.       ...  20.        20.        20.      ]\n  [ 20.        20.        20.       ...  20.        20.        20.      ]\n  [ 20.        20.        20.       ...  20.        20.        20.      ]\n  ...\n  [ 20.        20.        20.       ...  20.        20.        20.      ]\n  [ 20.        20.        20.       ...  20.        20.        20.      ]\n  [ 20.        20.        20.       ...  20.        20.        20.      ]]\n\n [[ 20.030926  20.031328  20.032204 ...  20.001385  20.001268  20.00117 ]\n  [ 20.030703  20.031597  20.033634 ...  20.001493  20.001345  20.001238]\n  [ 20.031723  20.033785  20.038801 ...  20.001757  20.001535  20.001389]\n  ...\n  [ 20.006077  20.004908  20.002953 ...  20.001383  20.001154  20.00104 ]\n  [ 20.005085  20.004053  20.00236  ...  20.00129   20.001116  20.001026]\n  [ 20.004608  20.003656  20.0021   ...  20.00125   20.001104  20.001026]]\n\n [[ 20.12404   20.126698  20.133305 ...  20.026028  20.02525   20.025595]\n  [ 20.116137  20.11882   20.12633  ...  20.02626   20.025606  20.02608 ]\n  [ 20.114033  20.117645  20.128752 ...  20.02802   20.027351  20.027908]\n  ...\n  [ 20.018784  20.016739  20.013128 ...  20.00563   20.004776  20.004353]\n  [ 20.015898  20.014067  20.010876 ...  20.005054  20.004427  20.004118]\n  [ 20.01441   20.012737  20.00983  ...  20.004791  20.004278  20.00403 ]]\n\n ...\n\n [[ 44.00391   43.917053  43.920734 ... 143.89009  142.69537  142.16621 ]\n  [ 44.004223  43.863914  43.708996 ... 143.29715  142.09953  141.6622  ]\n  [ 43.81018   43.64982   43.4085   ... 142.64955  141.90448  141.75969 ]\n  ...\n  [ 20.284891  20.19156   20.076902 ...  90.631195  78.81051   72.00585 ]\n  [ 20.218634  20.140545  20.047134 ...  56.04536   43.176456  39.645744]\n  [ 20.151264  20.09307   20.028439 ...  34.67456   27.534237  27.970665]]\n\n [[ 45.228874  45.115242  44.938766 ... 150.18481  150.12732  149.83371 ]\n  [ 44.492287  44.350613  44.180614 ... 149.79759  150.0778   149.77635 ]\n  [ 43.646873  43.590538  43.562504 ... 147.7298   148.82109  149.29768 ]\n  ...\n  [ 20.281096  20.186028  20.071451 ... 106.69953   93.09295   83.79199 ]\n  [ 20.205025  20.13359   20.046276 ...  80.62758   71.11945   62.30358 ]\n  [ 20.16152   20.102564  20.033293 ...  65.56552   56.724525  46.839134]]\n\n [[ 42.762764  42.892406  42.67096  ... 146.0912   145.20709  144.58104 ]\n  [ 43.14627   43.263447  43.141045 ... 145.02187  144.6713   143.69063 ]\n  [ 43.753468  43.769325  43.798447 ... 141.0417   142.32797  141.77148 ]\n  ...\n  [ 20.268656  20.194078  20.08938  ...  72.89162   70.64532   65.348694]\n  [ 20.206676  20.136755  20.052374 ...  59.554634  49.809177  42.573883]\n  [ 20.180956  20.111738  20.035168 ...  48.16472   36.145966  31.134487]]]\n\n\n\n# Initial visualasation of the data at time t=50 s\nit = slc.get_nearest_timestep(50)\nplt.imshow(slc_data[it])\n\n\n\n\n\n\n\n\n\n# Access the transpose data using ndarray.T and set the origin of the output\nplt.imshow(slc_data[it].T, origin='lower')\n\n\n\n\n\n\n\n\n\n# Initial visualasation of the data at time t=50 s\n# Finally, also the extend is specified to move from index to physical space\n# Additionally, the maximal value is set using the vmax argument\nplt.imshow(slc_data[it].T, \n           origin='lower',\n           vmax=200,\n           extent=slc.extent.as_list())\nplt.colorbar(label='temperature / C', orientation='horizontal')\nplt.xlabel('x coordinate / m')\nplt.ylabel('z coordinate / m')\n\nText(0, 0.5, 'z coordinate / m')\n\n\n\n\n\n\n\n\n\n\n# Example for a multi plot\nlist_t = [0, 50, 100, 200, 300, 400]\nfig, axs = plt.subplots(2,3, sharex=True, sharey=True)\nfor i in range(len(list_t)):\n    it = slc.get_nearest_timestep(list_t[i])\n    axs.flat[i].imshow(slc_data[it].T,\n                       vmin=20,\n                       vmax=400,\n                       origin='lower', \n                       extent=slc.extent.as_list())\n    axs.flat[i].set_title(f\"t={slc.times[it]:.1f}\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Fdsreader</span>"
    ]
  },
  {
    "objectID": "skript/aset.html",
    "href": "skript/aset.html",
    "title": "3  Available safe egress time",
    "section": "",
    "text": "3.1 Smoke layer\nIn this example, the smoke layer height is analysed. The distinction made here is based on a simple threshold in temperature: The local smoke layer height is given by the lowest point above a given temperature. The evaluation is done based on a slice across the burner and normal to the x-direction.\n# find the slice\nslc = sim.slices.get_by_id('BurnerTempX')\n\n# convert it to a global data structure and get the coordinates\nslc_data, slc_coords = slc.to_global(masked=True, fill=np.nan, return_coordinates=True)\nFirst, the data at a arbitrary point in time is visualsied. The white parts represent the obsticles.\n# pick a time index\nit = slc.get_nearest_timestep(150)\n\n# visualise the data\nplt.imshow(slc_data[it,:,:].T, origin='lower', vmax=200, extent=slc.extent.as_list())\nplt.title(f'Temperature at t={slc.times[it]:.2f}s')\nplt.xlabel('y position / m')\nplt.ylabel('z position / m')\nplt.colorbar(orientation='horizontal', label=f'{slc.quantity.name} / {slc.quantity.unit}' )\n\n# save output to file\n#plt.savefig('figs/appartment_temp_slice.svg', bbox_inches='tight')\n\n# plt.close()\nNow, for each y-position the z-indices are found, where the temperature exceedes the limit temperature. The lowest value is the smoke layer height at the y-position.\n# set temperature limit\ntemperature_limit = 75\n\n# create a data array to store the local height values, default \n# is the maximal z-coordinate\nlayer_height = np.full(slc_data.shape[1], slc_coords['z'][-1])\n\n# loop over all indices\nfor ix in range(len(layer_height)):\n    # find indices which exceed the limit\n    lt = np.where(slc_data[it, ix, :] &gt; temperature_limit)[0]\n    # if there are any, pick the lowest one\n    if len(lt) &gt; 0:\n        layer_height[ix] = slc_coords['z'][lt[0]]\nThe resulting values can now be plotted over the slice file, to check for plausibility.\n# slice data\nplt.imshow(slc_data[it,:,:].T, origin='lower', vmax=200, extent=slc.extent.as_list())\nplt.title(f'Temperature at t={slc.times[it]:.2f}s')\nplt.xlabel('y position / m')\nplt.ylabel('z position / m')\nplt.colorbar(orientation='horizontal', label=f'{slc.quantity.name} / {slc.quantity.unit}' );\n\n# smoke layer height\nplt.plot(slc_coords['y'], layer_height, '.-', color='red')\n\n# save output to file\n#plt.savefig('figs/appartment_temp_slice_height.svg', bbox_inches='tight')\n\n# plt.close()\nUsing the above approach for a single point in time, a loop over all times can be used to compute, e.g., the mean and standard deviation of the smoke layer height.\nlayer_mean = np.zeros_like(slc.times)\nlayer_stddev = np.zeros_like(slc.times)\n\nres = np.zeros(slc_data.shape[1])\n\nfor it in range(len(slc.times)):\n\n    res[:] = slc_coords['z'][-1]\n\n    for ix in range(len(res)):\n        lt = np.where(slc_data[it, ix, :] &gt; temperature_limit)[0]\n        if len(lt) &gt; 0:\n            res[ix] = slc_coords['z'][lt[0]]\n            \n    layer_mean[it] = np.mean(res)\n    layer_stddev[it] = np.std(res)\n# plot the mean and stddev values as functions of time\nplt.plot(slc.times, layer_mean, label='Mean Smoke Layer Height')\nplt.plot(slc.times, layer_stddev, label='Stddev of Smoke Layer Height')\nplt.grid()\nplt.legend()\nplt.xlabel('Time / s')\nplt.ylabel('Height / m')\n\n# save output to file\n#plt.savefig('figs/appartment_layer_mean_stddev.svg', bbox_inches='tight')\n\n# plt.close()\n\nText(0, 0.5, 'Height / m')\nBoth values can be combined and visualised jointly, where the standard deviation is used to indicate a fluctuation band around the mean value.\n# plot the mean\nplt.plot(slc.times, layer_mean, label='Mean Smoke Layer Height')\n\n# plot a band around the mean, using the stddev as band borders\nplt.fill_between(slc.times, layer_mean-layer_stddev, layer_mean+layer_stddev, color='C0', alpha=0.3)\n\n# show the floor for reference\nplt.ylim(bottom=0)\nplt.grid()\nplt.legend()\nplt.xlabel('Time / s')\nplt.ylabel('Height / m')\n\n# save output to file\n#plt.savefig('figs/appartment_layer_mean_band.svg', bbox_inches='tight')\n\n# plt.close()\n\nText(0, 0.5, 'Height / m')\nIf parts of the region shall be excluded in the analysis, a coordinate dependent mask can be used for this.\n# find indices, where the y coordinate is between the given values\nymin = 1\nymax = 4\ncoord_mask = np.where((slc_coords['y'] &gt; ymin) & (slc_coords['y'] &lt; ymax))\n# slice data\nplt.imshow(slc_data[it,:,:].T, origin='lower', vmax=200, extent=slc.extent.as_list())\nplt.title(f'Temperature at t={slc.times[it]:.2f}s')\nplt.xlabel('y position / m')\nplt.ylabel('z position / m')\nplt.colorbar(orientation='horizontal', label=f'{slc.quantity.name} / {slc.quantity.unit}' );\n\n# smoke layer height\nplt.plot(slc_coords['y'][coord_mask], layer_height[coord_mask], '.-', color='red')\n\n# save output to file\n#plt.savefig('figs/appartment_temp_slice_height_mask.svg', bbox_inches='tight')\n\n# plt.close()\nThe above procedure can be reused, yet the computation of the mean and standard deviation is carried out on the masked values.\nfor it in range(len(slc.times)):\n\n    res[:] = slc_coords['z'][-1]\n\n    for ix in np.ndindex(res.shape):\n        lt = np.where(slc_data[it, ix, :] &gt; temperature_limit)[1]\n        if len(lt) &gt; 0:\n            res[ix] = slc_coords['z'][lt[0]]\n    \n    # computation is carried out on the masked values now\n    layer_mean[it] = np.mean(res[coord_mask])\n    layer_stddev[it] = np.std(res[coord_mask])\n# same plot as above\nplt.plot(slc.times, layer_mean, label='Mean Smoke Layer Height')\nplt.fill_between(slc.times, layer_mean-layer_stddev, layer_mean+layer_stddev, color='C0', alpha=0.3)\nplt.ylim(bottom=0)\nplt.grid()\nplt.legend()\nplt.xlabel('Time / s')\nplt.ylabel('Height / m')\n\n# save output to file\n#plt.savefig('figs/appartment_layer_mean_band_mask.svg', bbox_inches='tight')\n\n# plt.close()\n\nText(0, 0.5, 'Height / m')",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Available safe egress time</span>"
    ]
  }
]